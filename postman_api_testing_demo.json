{
	"info": {
		"_postman_id": "677c6bcc-a9c6-4786-9c29-701a19756221",
		"name": "Reqres API Testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28810167"
	},
	"item": [
		{
			"name": "CreateUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {",
							"    pm.expect(pm.response.code).to.equal(201);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - name, job, id, and createdAt\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.name).to.exist;",
							"    pm.expect(responseData.job).to.exist;",
							"    pm.expect(responseData.id).to.exist;",
							"    pm.expect(responseData.createdAt).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Name and job must be non-empty strings\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"    pm.expect(responseData.job).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Job should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"ID is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"ID should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"CreatedAt is a valid date format\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"morpheus\",\n    \"job\": \"leader\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}api/users",
					"host": [
						"{{url}}api"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetUsers",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for status code",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Test for response time",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"// Test for response body schema/properties",
							"pm.test(\"Response body has the required properties\", function () {",
							"    let jsonData = pm.response.json()",
							"    pm.expect(jsonData).to.have.property('page');",
							"    pm.expect(jsonData).to.have.property('per_page');",
							"    pm.expect(jsonData).to.have.property('total');",
							"    pm.expect(jsonData).to.have.property('total_pages');",
							"    pm.expect(jsonData).to.have.property('data');",
							"    pm.expect(jsonData).to.have.property('support');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}api/users",
					"host": [
						"{{url}}api"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetSingleUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for status code",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Test for response time",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"// Test for content type",
							"pm.test(\"Content type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"// Test for existence of data and support fields",
							"pm.test(\"Response body has data and support fields\", function () {",
							"    pm.expect(pm.response.json()).to.have.keys('data', 'support');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}api/users/1",
					"host": [
						"{{url}}api"
					],
					"path": [
						"users",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for status code",
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							"// Test for response time",
							"pm.test(\"Response time is less than 600ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(600);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{url}}api/users/1",
					"host": [
						"{{url}}api"
					],
					"path": [
						"users",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdateUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for status code",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Test for response time",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"// Test for response body properties",
							"pm.test(\"Response body has name, job, and updatedAt properties\", function () {",
							"    pm.expect(pm.response.json()).to.have.property('name');",
							"    pm.expect(pm.response.json()).to.have.property('job');",
							"    pm.expect(pm.response.json()).to.have.property('updatedAt');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"morpheus\",\n    \"job\": \"zion resident\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}api/users/1",
					"host": [
						"{{url}}api"
					],
					"path": [
						"users",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "SuccessfulLogin",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"eve.holt@reqres.in\",\n    \"password\": \"cityslicka\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}api/login",
					"host": [
						"{{url}}api"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "UnsuccessfulLogin",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"daniyal@farman\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}api/login",
					"host": [
						"{{url}}api"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "DelayResponse",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for status code",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Test for response time",
							"pm.test(\"Response time is less than 4000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(4000);",
							"});",
							"",
							"// Test for response body schema/properties",
							"pm.test(\"Response has the expected properties\", function () {",
							"    pm.response.to.have.jsonBody('page');",
							"    pm.response.to.have.jsonBody('per_page');",
							"    pm.response.to.have.jsonBody('total');",
							"    pm.response.to.have.jsonBody('total_pages');",
							"    pm.response.to.have.jsonBody('data');",
							"    pm.response.to.have.jsonBody('support');",
							"});",
							"",
							"// Test for response headers",
							"pm.test(\"Content-Type header is present and has value 'application/json'\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}api/users?delay=3",
					"host": [
						"{{url}}api"
					],
					"path": [
						"users"
					],
					"query": [
						{
							"key": "delay",
							"value": "3"
						}
					]
				}
			},
			"response": []
		}
	]
}